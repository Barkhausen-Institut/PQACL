// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::ACCESS_CONTROL_PROOF_GUEST_ID;
use std::{error::Error, fs, path::PathBuf, env, fs::File, io::Write};
use risc0_zkvm::Receipt;
use serde_json::json;

fn main() -> Result<(), Box<dyn Error>>{
        

    // use executable as: ./verifier proof_data_path output_path.json
    let args: Vec<String> = env::args().collect();
    let data_path = &args[1];
    let output_path = &args[2];

    // Load the receipt file.
    let receipt_data = fs::read(PathBuf::from(data_path)).unwrap();
    let receipt: Receipt = bincode::deserialize(&receipt_data).unwrap();

    // Verify the receipt file.
    receipt.verify(ACCESS_CONTROL_PROOF_GUEST_ID).expect("Verification failed!");

    let (c_1, c_2) = receipt.journal.decode::<(Vec<u32>, Vec<u32>)>().unwrap();
    //println!("C_1=  {:?}", c_1);
    //println!("C_2=  {:?}", c_2);

    // Save the output file

    // Serialize the data to JSON
    let data = json!({"c_1": c_1,
                      "c_2": c_2});
    let json_data = serde_json::to_string_pretty(&data).unwrap();

    

    // Write the JSON data to a file
    let mut file = File::create(output_path).unwrap();
    file.write_all(json_data.as_bytes()).unwrap();

    println!("Proof verified successfully!");

    Ok(())
}
